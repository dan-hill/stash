scalar ObjectId

type Thing {
    _id: ObjectId!
    name: String
    summary: String
    category: String
    subcategory: String
    user: String
    attributes: [Attribute]
    sources: [Source]
    instances: [Instance]
}

type Instance {
    _id: ObjectId!
    thing: Thing
    base_quantity: Int
    quantity: Int
}

type Source {
    _id: ObjectId!
    name: String
    url: String
    price: Float
}

type Attribute {
    _id: ObjectId!
    key: String
    value: String
}

type Query {
    thing(_id: ObjectId): Thing
    things: [Thing]
    instances: [Instance]
    sources: [Source]
    attributes: [Attribute]
}

input ThingInput {
    name: String
    summary: String
    category: String
    subcategory: String
    user: String
    attributes: [ObjectId]
    sources: [ObjectId]
    instances: [ObjectId]
}

input InstanceInput {
    thing: ObjectId
    base_quantity: Int
    quantity: Int
}

input SourceInput {
    name: String
    url: String
    price: Float
}

input AttributeInput {
    key: String
    value: String
}

type Mutation {
    createThing(input: ThingInput): Thing
    createInstance(input: InstanceInput): Instance
    createSource(input: SourceInput): Source
    createAttribute(thingId: ObjectId, input: AttributeInput): Attribute
}
